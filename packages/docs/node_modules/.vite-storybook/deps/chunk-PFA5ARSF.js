import {
  require_task,
  require_validate_arguments_length
} from "./chunk-NEK5IPCF.js";
import {
  require_array_slice
} from "./chunk-WRNXHNZR.js";
import {
  esm_default
} from "./chunk-63CEWH4T.js";
import {
  require_browser
} from "./chunk-EU3NVPBZ.js";
import {
  require_engine_user_agent,
  require_export,
  require_function_apply,
  require_global,
  require_is_callable
} from "./chunk-D2M6HF7H.js";
import {
  __commonJS,
  __toESM
} from "./chunk-S5KM4IGW.js";

// ../../node_modules/core-js/modules/web.clear-immediate.js
var require_web_clear_immediate = __commonJS({
  "../../node_modules/core-js/modules/web.clear-immediate.js"() {
    var $ = require_export();
    var global = require_global();
    var clearImmediate = require_task().clear;
    $({ global: true, bind: true, enumerable: true, forced: global.clearImmediate !== clearImmediate }, {
      clearImmediate
    });
  }
});

// ../../node_modules/core-js/internals/engine-is-bun.js
var require_engine_is_bun = __commonJS({
  "../../node_modules/core-js/internals/engine-is-bun.js"(exports, module) {
    module.exports = typeof Bun == "function" && Bun && typeof Bun.version == "string";
  }
});

// ../../node_modules/core-js/internals/schedulers-fix.js
var require_schedulers_fix = __commonJS({
  "../../node_modules/core-js/internals/schedulers-fix.js"(exports, module) {
    "use strict";
    var global = require_global();
    var apply = require_function_apply();
    var isCallable = require_is_callable();
    var ENGINE_IS_BUN = require_engine_is_bun();
    var USER_AGENT = require_engine_user_agent();
    var arraySlice = require_array_slice();
    var validateArgumentsLength = require_validate_arguments_length();
    var Function = global.Function;
    var WRAP = /MSIE .\./.test(USER_AGENT) || ENGINE_IS_BUN && function() {
      var version = global.Bun.version.split(".");
      return version.length < 3 || version[0] == 0 && (version[1] < 3 || version[1] == 3 && version[2] == 0);
    }();
    module.exports = function(scheduler, hasTimeArg) {
      var firstParamIndex = hasTimeArg ? 2 : 1;
      return WRAP ? function(handler, timeout) {
        var boundArgs = validateArgumentsLength(arguments.length, 1) > firstParamIndex;
        var fn = isCallable(handler) ? handler : Function(handler);
        var params = boundArgs ? arraySlice(arguments, firstParamIndex) : [];
        var callback = boundArgs ? function() {
          apply(fn, this, params);
        } : fn;
        return hasTimeArg ? scheduler(callback, timeout) : scheduler(callback);
      } : scheduler;
    };
  }
});

// ../../node_modules/core-js/modules/web.set-immediate.js
var require_web_set_immediate = __commonJS({
  "../../node_modules/core-js/modules/web.set-immediate.js"() {
    var $ = require_export();
    var global = require_global();
    var setTask = require_task().set;
    var schedulersFix = require_schedulers_fix();
    var setImmediate2 = global.setImmediate ? schedulersFix(setTask, false) : setTask;
    $({ global: true, bind: true, enumerable: true, forced: global.setImmediate !== setImmediate2 }, {
      setImmediate: setImmediate2
    });
  }
});

// ../../node_modules/core-js/modules/web.immediate.js
require_web_clear_immediate();
require_web_set_immediate();

// ../../node_modules/@storybook/channels/dist/esm/index.js
var import_util_deprecate = __toESM(require_browser());
var _templateObject;
function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
var generateRandomId = function generateRandomId2() {
  return Math.random().toString(16).slice(2);
};
var Channel = function() {
  function Channel2() {
    var _this = this;
    var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, transport = _ref.transport, _ref$async = _ref.async, async = _ref$async === void 0 ? false : _ref$async;
    _classCallCheck(this, Channel2);
    this.isAsync = void 0;
    this.sender = generateRandomId();
    this.events = {};
    this.data = {};
    this.transport = void 0;
    this.addPeerListener = (0, import_util_deprecate.default)(function(eventName, listener) {
      _this.addListener(eventName, listener);
    }, esm_default(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      channel.addPeerListener is deprecated\n    "]))));
    this.isAsync = async;
    if (transport) {
      this.transport = transport;
      this.transport.setHandler(function(event) {
        return _this.handleEvent(event);
      });
    }
  }
  _createClass(Channel2, [{
    key: "hasTransport",
    get: function get() {
      return !!this.transport;
    }
  }, {
    key: "addListener",
    value: function addListener(eventName, listener) {
      this.events[eventName] = this.events[eventName] || [];
      this.events[eventName].push(listener);
    }
  }, {
    key: "emit",
    value: function emit(eventName) {
      var _this2 = this;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      var event = {
        type: eventName,
        args,
        from: this.sender
      };
      var options = {};
      if (args.length >= 1 && args[0] && args[0].options) {
        options = args[0].options;
      }
      var handler = function handler2() {
        if (_this2.transport) {
          _this2.transport.send(event, options);
        }
        _this2.handleEvent(event);
      };
      if (this.isAsync) {
        setImmediate(handler);
      } else {
        handler();
      }
    }
  }, {
    key: "last",
    value: function last(eventName) {
      return this.data[eventName];
    }
  }, {
    key: "eventNames",
    value: function eventNames() {
      return Object.keys(this.events);
    }
  }, {
    key: "listenerCount",
    value: function listenerCount(eventName) {
      var listeners = this.listeners(eventName);
      return listeners ? listeners.length : 0;
    }
  }, {
    key: "listeners",
    value: function listeners(eventName) {
      var listeners2 = this.events[eventName];
      return listeners2 || void 0;
    }
  }, {
    key: "once",
    value: function once(eventName, listener) {
      var onceListener = this.onceListener(eventName, listener);
      this.addListener(eventName, onceListener);
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners(eventName) {
      if (!eventName) {
        this.events = {};
      } else if (this.events[eventName]) {
        delete this.events[eventName];
      }
    }
  }, {
    key: "removeListener",
    value: function removeListener(eventName, listener) {
      var listeners = this.listeners(eventName);
      if (listeners) {
        this.events[eventName] = listeners.filter(function(l) {
          return l !== listener;
        });
      }
    }
  }, {
    key: "on",
    value: function on(eventName, listener) {
      this.addListener(eventName, listener);
    }
  }, {
    key: "off",
    value: function off(eventName, listener) {
      this.removeListener(eventName, listener);
    }
  }, {
    key: "handleEvent",
    value: function handleEvent(event) {
      var listeners = this.listeners(event.type);
      if (listeners && listeners.length) {
        listeners.forEach(function(fn) {
          fn.apply(event, event.args);
        });
      }
      this.data[event.type] = event.args;
    }
  }, {
    key: "onceListener",
    value: function onceListener(eventName, listener) {
      var _this3 = this;
      var onceListener2 = function onceListener3() {
        _this3.removeListener(eventName, onceListener3);
        return listener.apply(void 0, arguments);
      };
      return onceListener2;
    }
  }]);
  return Channel2;
}();
var esm_default2 = Channel;

export {
  Channel,
  esm_default2 as esm_default
};
//# sourceMappingURL=chunk-PFA5ARSF.js.map
